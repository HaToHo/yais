#!/usr/bin/env python
# -*- coding: utf-8 -*-
from saml2 import BINDING_HTTP_REDIRECT, BINDING_URI
from saml2 import BINDING_HTTP_ARTIFACT
from saml2 import BINDING_HTTP_POST
from saml2 import BINDING_SOAP
from saml2.saml import NAME_FORMAT_URI
from saml2.saml import NAMEID_FORMAT_TRANSIENT
from saml2.saml import NAMEID_FORMAT_PERSISTENT

try:
    from saml2.sigver import get_xmlsec_binary
except ImportError:
    get_xmlsec_binary = None

if get_xmlsec_binary:
    xmlsec_path = get_xmlsec_binary(["/opt/local/bin","/usr/local/bin"])
else:
    xmlsec_path = '<LOCALPATHTOXMLSEC>'

BASE = "<SERVER>"

CONFIG = {
    "entityid": "%s/<ENTITYID>.xml" % BASE,
    "description": "<DESCRIPTION>",
    "service": {
<ATTRIBUTESERVICE>
        "aa": {
            "endpoints": {
                "attribute_service": [
                    ("%s/attr" % BASE, BINDING_SOAP)
                ]
            },
            "name_id_format": [NAMEID_FORMAT_TRANSIENT,
                               NAMEID_FORMAT_PERSISTENT]
        },
</ATTRIBUTESERVICE>
<ATTRIBUTEQUERYSERVICE>
        "aq": {
            "endpoints": {
                "authn_query_service": [
                    ("%s/aqs" % BASE, BINDING_SOAP)
                ]
            },
        },
</ATTRIBUTEQUERYSERVICE>
        "idp": {
            "name": "<ENTITYID>",
            "endpoints": {
<SINGLESIGNONSERVICE>
                "single_sign_on_service": [
                    ("%s/sso/redirect" % BASE, BINDING_HTTP_REDIRECT),
                    ("%s/sso/post" % BASE, BINDING_HTTP_POST),
                    ("%s/sso/art" % BASE, BINDING_HTTP_ARTIFACT),
                    ("%s/sso/ecp" % BASE, BINDING_SOAP)
                ],
</SINGLESIGNONSERVICE>
<SINGLELOGOUTSERVICE>
                "single_logout_service": [
                    ("%s/slo/soap" % BASE, BINDING_SOAP),
                    ("%s/slo/post" % BASE, BINDING_HTTP_POST),
                    ("%s/slo/redirect" % BASE, BINDING_HTTP_REDIRECT)
                ],
</SINGLELOGOUTSERVICE>
<ARTIFACTRESOLVESERVICE>
                "artifact_resolve_service": [
                    ("%s/ars" % BASE, BINDING_SOAP)
                ],
</ARTIFACTRESOLVESERVICE>
<ASSERTIONIDREQUESTSERVICE>
                "assertion_id_request_service": [
                    ("%s/airs" % BASE, BINDING_URI)
                ],
</ASSERTIONIDREQUESTSERVICE>
<MANAGENAMEIDSERVICE>
                "manage_name_id_service": [
                    ("%s/mni/soap" % BASE, BINDING_SOAP),
                    ("%s/mni/post" % BASE, BINDING_HTTP_POST),
                    ("%s/mni/redirect" % BASE, BINDING_HTTP_REDIRECT),
                    ("%s/mni/art" % BASE, BINDING_HTTP_ARTIFACT)
                ],
</MANAGENAMEIDSERVICE>
<NAMEIDMAPPINGSERVICE>
                "name_id_mapping_service": [
                    ("%s/nim" % BASE, BINDING_SOAP),
                ],
</NAMEIDMAPPINGSERVICE>
            },
            "policy": {
                "default": {
                    "lifetime": {"minutes": <TIMEOUT>},
                    "attribute_restrictions": <ATTRIBUTERESTRICTIONS>, # means all I have
                    "name_form": NAME_FORMAT_URI,
                    "entity_categories": <ENTITYCATEGORIES>
                },
            },
            "subject_data": "./idp.subject",
            "name_id_format": [NAMEID_FORMAT_TRANSIENT,
                               NAMEID_FORMAT_PERSISTENT]
        },
    },
    "debug": 1,
    "key_file": "<KEYFILE>",
    "cert_file": "<CERTFILE>",
    "metadata": {
<LOCALMETADATA>
            "local": ["<LOCALMETADATAPATH>"],
</LOCALMETADATA>
<REMOTEMETADATA>
            "remote": [{ 
                "url":"<REMOTEMETADATAURL>",
                "cert":"<REMOTEMETADATACERT>"}]
</REMOTEMETADATA>
    },
    "organization": {
        "display_name": "<ORGDISPLAYNAME>",
        "name": "<ORGNAME>",
        "url": "<ORGURL>",
    },
    "contact_person": [
        <CONTACTLIST>
    ],
    # This database holds the map between a subjects local identifier and
    # the identifier returned to a SP
    "xmlsec_binary": xmlsec_path,
    "attribute_map_dir": "<ATTRIBUTEMAPS>",
    "logger": {
        "rotating": {
            "filename": "<LOGFILENAME>",
            "maxBytes": <LOGSIZE>,
            "backupCount": <LOGBACKUPCOUNT>,
        },
        "loglevel": "<LOGLEVEL>",
    }
}
