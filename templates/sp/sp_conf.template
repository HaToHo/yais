# -*- coding: utf-8 -*-
from saml2 import BINDING_HTTP_REDIRECT
from saml2.saml import NAME_FORMAT_URI
from saml2.sigver import get_xmlsec_binary
from saml2.entity_category.edugain import COC
from saml2.entity_category.swamid import RESEARCH_AND_EDUCATION
from saml2.entity_category.swamid import HEI
from saml2.entity_category.swamid import SFS_1993_1153
from saml2.entity_category.swamid import NREN
from saml2.entity_category.swamid import EU

try:
    from saml2.sigver import get_xmlsec_binary
except ImportError:
    get_xmlsec_binary = None

if get_xmlsec_binary:
    xmlsec_path = get_xmlsec_binary(["/opt/local/bin","/usr/local/bin"])
else:
    xmlsec_path = '<LOCALPATHTOXMLSEC>'

HOST = "<HOST>"
PORT = <PORT>

BASE = "http://%s:%s" % (HOST, PORT)


CONFIG = {
    "entityid": "%s/<ENTITYID>.xml" % BASE,
    "description": "<DESCRIPTION>",
    "entity_category": [<ENTITYCATEGORY>],
    "service": {
        "sp": {
            "want_assertions_signed": "true",
            "want_response_signed": "true",
            "name": "<NAME>",
            "endpoints": {
<ASSERTIONCONSUMERSERVICE>
                "assertion_consumer_service": [BASE],
</ASSERTIONCONSUMERSERVICE>
<SINGLELOGOUTSERVICE>
                "single_logout_service": [(BASE + "/slo",
                                            BINDING_HTTP_REDIRECT)],
</SINGLELOGOUTSERVICE>
<DISCOVERYSERVICE>
                "discovery_response": [
                    ("%s/disco" % BASE, BINDING_DISCO)
                ],
</DISCOVERYSERVICE>
            },
            "required_attributes": [<REQUIREDATTRIBUTES>],
            "optional_attributes": [<OPTIONALATTRIBUTES>],
        }
    },
    "debug": 1,
    "key_file": "<KEYFILE>",
    "cert_file": "<CERTFILE>",
    "metadata": {
        <LOCALMETADATA>
                    "local": ["<LOCALMETADATAPATH>"],
        </LOCALMETADATA>
        <REMOTEMETADATA>
                    "remote": [{
                        "url":"<REMOTEMETADATAURL>",
                        "cert":"<REMOTEMETADATACERT>"}]
        </REMOTEMETADATA>
    },
    # -- below used by make_metadata --
    "organization": {
        "name": "<ORGANIZATIONNAME>",
        "display_name": [<ORGANIZATIONDISPLAYNAME>],
        "url": "<ORGANIZATIONURL>",
    },
    "contact_person": [
        <CONTACTLIST>
    ],
    "xmlsec_binary": xmlsec_path,
    "name_form": NAME_FORMAT_URI,
    "logger": {
        "rotating": {
            "filename": "<LOGFILENAME>",
            "maxBytes": <LOGSIZE>,
            "backupCount": <LOGBACKUPCOUNT>,
        },
        "loglevel": "<LOGLEVEL>",
    }
}

